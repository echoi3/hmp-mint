{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Session = void 0;\n\nconst sha_js_1 = require(\"sha.js\");\n\nconst util_1 = require(\"../util\");\n\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\n\nclass Session {\n  constructor(storage, id, secret, linked) {\n    this._storage = storage;\n    this._id = id || (0, util_1.randomBytesHex)(16);\n    this._secret = secret || (0, util_1.randomBytesHex)(32);\n    this._key = new sha_js_1.sha256().update(`${this._id}, ${this._secret} WalletLink`) // ensure old sessions stay connected\n    .digest(\"hex\");\n    this._linked = !!linked;\n  }\n\n  static load(storage) {\n    const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n    const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n    const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n\n    if (id && secret) {\n      return new Session(storage, id, secret, linked === \"1\");\n    }\n\n    return null;\n  }\n  /**\n   * Takes in a session ID and returns the sha256 hash of it.\n   * @param sessionId session ID\n   */\n\n\n  static hash(sessionId) {\n    return new sha_js_1.sha256().update(sessionId).digest(\"hex\");\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get secret() {\n    return this._secret;\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  get linked() {\n    return this._linked;\n  }\n\n  set linked(val) {\n    this._linked = val;\n    this.persistLinked();\n  }\n\n  save() {\n    this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n\n    this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n\n    this.persistLinked();\n    return this;\n  }\n\n  persistLinked() {\n    this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n  }\n\n}\n\nexports.Session = Session;","map":{"version":3,"sources":["/Users/echoi33/Downloads/Source V2/node_modules/@coinbase/wallet-sdk/dist/relay/Session.js"],"names":["Object","defineProperty","exports","value","Session","sha_js_1","require","util_1","STORAGE_KEY_SESSION_ID","STORAGE_KEY_SESSION_SECRET","STORAGE_KEY_SESSION_LINKED","constructor","storage","id","secret","linked","_storage","_id","randomBytesHex","_secret","_key","sha256","update","digest","_linked","load","getItem","hash","sessionId","key","val","persistLinked","save","setItem"],"mappings":"AAAA,a,CACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAME,sBAAsB,GAAG,YAA/B;AACA,MAAMC,0BAA0B,GAAG,gBAAnC;AACA,MAAMC,0BAA0B,GAAG,gBAAnC;;AACA,MAAMN,OAAN,CAAc;AACVO,EAAAA,WAAW,CAACC,OAAD,EAAUC,EAAV,EAAcC,MAAd,EAAsBC,MAAtB,EAA8B;AACrC,SAAKC,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,GAAL,GAAWJ,EAAE,IAAI,CAAC,GAAGN,MAAM,CAACW,cAAX,EAA2B,EAA3B,CAAjB;AACA,SAAKC,OAAL,GAAeL,MAAM,IAAI,CAAC,GAAGP,MAAM,CAACW,cAAX,EAA2B,EAA3B,CAAzB;AACA,SAAKE,IAAL,GAAY,IAAIf,QAAQ,CAACgB,MAAb,GACPC,MADO,CACC,GAAE,KAAKL,GAAI,KAAI,KAAKE,OAAQ,aAD7B,EAC2C;AAD3C,KAEPI,MAFO,CAEA,KAFA,CAAZ;AAGA,SAAKC,OAAL,GAAe,CAAC,CAACT,MAAjB;AACH;;AACU,SAAJU,IAAI,CAACb,OAAD,EAAU;AACjB,UAAMC,EAAE,GAAGD,OAAO,CAACc,OAAR,CAAgBlB,sBAAhB,CAAX;AACA,UAAMO,MAAM,GAAGH,OAAO,CAACc,OAAR,CAAgBhB,0BAAhB,CAAf;AACA,UAAMI,MAAM,GAAGF,OAAO,CAACc,OAAR,CAAgBjB,0BAAhB,CAAf;;AACA,QAAII,EAAE,IAAIC,MAAV,EAAkB;AACd,aAAO,IAAIV,OAAJ,CAAYQ,OAAZ,EAAqBC,EAArB,EAAyBC,MAAzB,EAAiCC,MAAM,KAAK,GAA5C,CAAP;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACe,SAAJY,IAAI,CAACC,SAAD,EAAY;AACnB,WAAO,IAAIvB,QAAQ,CAACgB,MAAb,GAAsBC,MAAtB,CAA6BM,SAA7B,EAAwCL,MAAxC,CAA+C,KAA/C,CAAP;AACH;;AACK,MAAFV,EAAE,GAAG;AACL,WAAO,KAAKI,GAAZ;AACH;;AACS,MAANH,MAAM,GAAG;AACT,WAAO,KAAKK,OAAZ;AACH;;AACM,MAAHU,GAAG,GAAG;AACN,WAAO,KAAKT,IAAZ;AACH;;AACS,MAANL,MAAM,GAAG;AACT,WAAO,KAAKS,OAAZ;AACH;;AACS,MAANT,MAAM,CAACe,GAAD,EAAM;AACZ,SAAKN,OAAL,GAAeM,GAAf;AACA,SAAKC,aAAL;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAKhB,QAAL,CAAciB,OAAd,CAAsBzB,sBAAtB,EAA8C,KAAKS,GAAnD;;AACA,SAAKD,QAAL,CAAciB,OAAd,CAAsBxB,0BAAtB,EAAkD,KAAKU,OAAvD;;AACA,SAAKY,aAAL;AACA,WAAO,IAAP;AACH;;AACDA,EAAAA,aAAa,GAAG;AACZ,SAAKf,QAAL,CAAciB,OAAd,CAAsBvB,0BAAtB,EAAkD,KAAKc,OAAL,GAAe,GAAf,GAAqB,GAAvE;AACH;;AAlDS;;AAoDdtB,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Session = void 0;\nconst sha_js_1 = require(\"sha.js\");\nconst util_1 = require(\"../util\");\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\nclass Session {\n    constructor(storage, id, secret, linked) {\n        this._storage = storage;\n        this._id = id || (0, util_1.randomBytesHex)(16);\n        this._secret = secret || (0, util_1.randomBytesHex)(32);\n        this._key = new sha_js_1.sha256()\n            .update(`${this._id}, ${this._secret} WalletLink`) // ensure old sessions stay connected\n            .digest(\"hex\");\n        this._linked = !!linked;\n    }\n    static load(storage) {\n        const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n        const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n        const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n        if (id && secret) {\n            return new Session(storage, id, secret, linked === \"1\");\n        }\n        return null;\n    }\n    /**\n     * Takes in a session ID and returns the sha256 hash of it.\n     * @param sessionId session ID\n     */\n    static hash(sessionId) {\n        return new sha_js_1.sha256().update(sessionId).digest(\"hex\");\n    }\n    get id() {\n        return this._id;\n    }\n    get secret() {\n        return this._secret;\n    }\n    get key() {\n        return this._key;\n    }\n    get linked() {\n        return this._linked;\n    }\n    set linked(val) {\n        this._linked = val;\n        this.persistLinked();\n    }\n    save() {\n        this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n        this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n        this.persistLinked();\n        return this;\n    }\n    persistLinked() {\n        this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n    }\n}\nexports.Session = Session;\n"]},"metadata":{},"sourceType":"script"}