{"ast":null,"code":"var _jsxFileName = \"/Users/echoi33/Documents/HMP/hmp-mint/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport CoinbaseWalletSDK, { CoinbaseWalletProvider } from \"@coinbase/wallet-sdk\";\nimport logo from './assets/Logo.png';\nimport os from './assets/os.png';\nimport twitter from './assets/twitter.png';\nimport home from './assets/home-button.png';\n\nvar Scroll = require('react-scroll');\n\nconst ops = () => {\n  window.open(\"https://opensea.io/collection/hime-me-please-3rd\");\n};\n\nconst tweet = () => {\n  window.open(\"https://twitter.com/_hidemeplease\");\n};\n\nconst homeLink = () => {\n  window.open(\"https://hidemeplease.xyz/\");\n};\n\nlet account;\nlet mintAmount = 1;\nlet valueOfNFTs = 0;\nlet totalSupplyNFT;\nlet maxMintNFTs;\nlet onlyLeft;\nlet owner;\nlet publicSale;\n;\nlet cost = '';\nlet maxMintAmountPerTx = '';\nlet publicMintMsg = \"Public Mint\";\nlet ABI = [{\n  \"inputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"constructor\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"owner\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"approved\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"Approval\",\n  \"type\": \"event\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"owner\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"operator\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"internalType\": \"bool\",\n    \"name\": \"approved\",\n    \"type\": \"bool\"\n  }],\n  \"name\": \"ApprovalForAll\",\n  \"type\": \"event\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"previousOwner\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"newOwner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"OwnershipTransferred\",\n  \"type\": \"event\"\n}, {\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"from\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": true,\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"Transfer\",\n  \"type\": \"event\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"approve\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"owner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"cost\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"getApproved\",\n  \"outputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"hiddenMetadataUri\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"owner\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"address\",\n    \"name\": \"operator\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"isApprovedForAll\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"maxMintAmountPerTx\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"maxSupply\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_mintAmount\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"mint\",\n  \"outputs\": [],\n  \"stateMutability\": \"payable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_mintAmount\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"address\",\n    \"name\": \"_receiver\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"mintForAddress\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"name\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"owner\",\n  \"outputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"ownerOf\",\n  \"outputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"\",\n    \"type\": \"address\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"paused\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"renounceOwnership\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"revealed\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"from\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"safeTransferFrom\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"from\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"bytes\",\n    \"name\": \"data\",\n    \"type\": \"bytes\"\n  }],\n  \"name\": \"safeTransferFrom\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"operator\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"bool\",\n    \"name\": \"approved\",\n    \"type\": \"bool\"\n  }],\n  \"name\": \"setApprovalForAll\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_cost\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"setCost\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"_hiddenMetadataUri\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"setHiddenMetadataUri\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_maxMintAmountPerTx\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"setMaxMintAmountPerTx\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"_state\",\n    \"type\": \"bool\"\n  }],\n  \"name\": \"setPaused\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"_state\",\n    \"type\": \"bool\"\n  }],\n  \"name\": \"setRevealed\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"_uriPrefix\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"setUriPrefix\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"_uriSuffix\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"setUriSuffix\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"bytes4\",\n    \"name\": \"interfaceId\",\n    \"type\": \"bytes4\"\n  }],\n  \"name\": \"supportsInterface\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"symbol\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"tokenURI\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"totalSupply\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"from\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"tokenId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"transferFrom\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"newOwner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"transferOwnership\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"uriPrefix\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"uriSuffix\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"_owner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"walletOfOwner\",\n  \"outputs\": [{\n    \"internalType\": \"uint256[]\",\n    \"name\": \"\",\n    \"type\": \"uint256[]\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"withdraw\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}];\nlet address = \"0x1cBBF5BA9362d60747F149d4c2E35f72e1a74bC3\";\nlet contract;\n\nclass Home extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      walletAddress: \"\",\n      totalSupply: \"\",\n      onlyLeftAmount: \"\",\n      statusError: false,\n      statusLoading: false,\n      success: false,\n      nftMintingAmount: '1',\n      totalValue: \"\",\n      maxmint: '',\n      _publicMintMsg: 'Mint Now',\n      _cost: 0,\n      _maxMintAmountPerTx: '',\n      _owner: ''\n    };\n\n    this.onSubmitMinus = async event => {\n      event.preventDefault();\n      mintAmount = mintAmount - 1;\n\n      if (mintAmount < 1) {\n        mintAmount = 1;\n      }\n\n      if (owner == account) {\n        console.log(\"owner : \" + owner);\n        onlyLeft = 10000 - totalSupplyNFT;\n\n        if (mintAmount > onlyLeft) {\n          mintAmount = onlyLeft;\n        }\n\n        valueOfNFTs = mintAmount * 0;\n        this.setState({\n          nftMintingAmount: mintAmount\n        });\n        this.setState({\n          totalValue: valueOfNFTs\n        });\n      } else {\n        if (totalSupplyNFT < 10000) {\n          onlyLeft = maxMintAmountPerTx - publicSale;\n\n          if (mintAmount > onlyLeft) {\n            mintAmount = onlyLeft;\n          }\n\n          valueOfNFTs = mintAmount * this.state._cost;\n          this.setState({\n            nftMintingAmount: mintAmount\n          });\n          this.setState({\n            totalValue: valueOfNFTs\n          });\n        }\n      }\n    };\n\n    this.onSubmitPlus = async event => {\n      event.preventDefault(); //,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n\n      mintAmount = mintAmount + 1;\n\n      if (owner == account) {\n        console.log(\"owner : \" + owner);\n        onlyLeft = 10000 - totalSupplyNFT;\n\n        if (mintAmount > onlyLeft) {\n          mintAmount = onlyLeft;\n        }\n\n        valueOfNFTs = mintAmount * 0;\n        this.setState({\n          nftMintingAmount: mintAmount\n        });\n        this.setState({\n          totalValue: valueOfNFTs\n        });\n      } else {\n        if (totalSupplyNFT < 10000) {\n          onlyLeft = maxMintAmountPerTx;\n          console.log(onlyLeft);\n\n          if (mintAmount > onlyLeft) {\n            mintAmount = onlyLeft;\n          }\n\n          valueOfNFTs = mintAmount * this.state._cost;\n          this.setState({\n            nftMintingAmount: mintAmount\n          });\n          this.setState({\n            totalValue: valueOfNFTs\n          });\n        }\n      }\n    };\n\n    this.onSubmit2 = async event => {\n      event.preventDefault();\n      console.log(this.state.walletAddress);\n\n      try {\n        let owner = await contract.methods.owner().call();\n\n        if (account != owner) {\n          try {\n            console.log(\"minAmount:\" + mintAmount);\n            console.log(\"valueOfNFTs:\" + valueOfNFTs);\n            console.log(\"cost : \" + this.state.totalValue);\n            this.setState({\n              statusError: false,\n              statusLoading: true\n            });\n            await contract.methods.mint(mintAmount * 1).send({\n              gasLimit: 385000,\n              from: account,\n              value: this.state.totalValue * 1\n            });\n            this.setState({\n              statusLoading: false,\n              success: true\n            });\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            window.location.reload();\n          } catch (err) {\n            this.setState({\n              errorMassage: \"ERROR : \" + err.message,\n              statusLoading: false,\n              success: false,\n              statusError: true\n            });\n            console.log(err);\n          }\n        } else {\n          try {\n            console.log(\"minAmount:\" + mintAmount);\n            console.log(\"valueOfNFTs:\" + valueOfNFTs);\n            this.setState({\n              statusError: false,\n              statusLoading: true\n            });\n            await contract.methods.mint(mintAmount * 1).send({\n              gasLimit: 385000,\n              from: account,\n              value: this.state.totalValue * 0\n            });\n            this.setState({\n              statusLoading: false,\n              success: true\n            });\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            window.location.reload();\n          } catch (err) {\n            this.setState({\n              errorMassage: \"ERROR : \" + err.message,\n              statusLoading: false,\n              success: false,\n              statusError: true\n            });\n            console.log(err);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.walletConnect = async event => {\n      event.preventDefault();\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider,\n          // required\n          options: {\n            infuraId: \"811915bee3744bd38afcf17ecac0f9a6\" // required\n\n          }\n        },\n        coinbasewallet: {\n          package: CoinbaseWalletSDK,\n          // Required\n          options: {\n            appName: \"Aterium Universe\",\n            // Required\n            infuraId: \"811915bee3744bd38afcf17ecac0f9a6\",\n            // Required\n            rpc: \"\",\n            // Optional if `infuraId` is provided; otherwise it's required\n            chainId: 1,\n            // Optional. It defaults to 1 if not provided\n            darkMode: true // Optional. Use dark theme, defaults to false\n\n          }\n        }\n      };\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\",\n        // optional\n        cacheProvider: true,\n        // optional\n        providerOptions // required\n\n      });\n      const provider = await web3Modal.connect(); //  Enable session (triggers QR Code modal)\n\n      await provider.enable();\n      const web3 = new Web3(provider);\n      console.log(\"provider : \" + provider); // Subscribe to accounts change\n\n      provider.on(\"accountsChanged\", accounts => {\n        console.log(accounts);\n      }); // Subscribe to chainId change\n\n      provider.on(\"chainChanged\", chainId => {\n        console.log(chainId);\n      }); // Subscribe to provider connection\n\n      provider.on(\"connect\", info => {\n        console.log(info);\n        console.log(\"I'm LOGGED IN\");\n      }); // Subscribe to provider disconnection\n\n      provider.on(\"disconnect\", error => {\n        console.log(error);\n      }); // test if wallet is connected\n\n      if (web3Modal.cachedProvider) {\n        // connected now you can get accounts\n        console.log(\"web3Modal.cachedProvider :\" + web3Modal.cachedProvider);\n        console.log(\"provider :\" + provider);\n        const accounts = await web3.eth.getAccounts();\n        account = accounts[0];\n        this.setState({\n          walletAddress: account\n        });\n        contract = new web3.eth.Contract(ABI, address);\n        console.log(\"contract :\" + contract);\n\n        if (provider) {\n          //\t(async () => {\n          if (web3Modal.cachedProvider != \"walletconnect\" && web3Modal.cachedProvider != \"coinbasewallet\") {\n            const chainId = 1;\n\n            if (window.ethereum.networkVersion !== chainId) {\n              try {\n                await window.ethereum.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [{\n                    chainId: web3.utils.toHex(chainId)\n                  }]\n                });\n              } catch (err) {\n                // This error code indicates that the chain has not been added to MetaMask.\n                if (err.code === 4902) {\n                  await window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainName: 'Ethereum Mainnet',\n                      chainId: web3.utils.toHex(chainId),\n                      nativeCurrency: {\n                        name: 'Ethereum Mainnet',\n                        decimals: 18,\n                        symbol: 'ETH'\n                      },\n                      rpcUrls: ['https://mainnet.infura.io/v3/']\n                    }]\n                  });\n                }\n              }\n            }\n\n            try {\n              try {\n                localStorage.setItem('isWalletConnected', true);\n              } catch (ex) {\n                console.log(ex);\n              }\n\n              totalSupplyNFT = await contract.methods.totalSupply().call();\n              this.setState({\n                totalSupply: totalSupplyNFT\n              });\n              console.log(\"Total Supply:\" + totalSupplyNFT);\n              maxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n              this.setState({\n                _maxMintAmountPerTx: maxMintAmountPerTx\n              });\n              console.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n              publicSale = await contract.methods.balanceOf(account).call();\n              this.setState({\n                myNFTWallet: publicSale\n              });\n              cost = await contract.methods.cost().call();\n              this.setState({\n                _cost: cost\n              });\n              console.log(\"cost :\" + cost);\n              owner = await contract.methods.owner().call();\n              this.setState({\n                _owner: owner\n              });\n              console.log(\"Owner\" + owner);\n\n              if (owner == account) {\n                console.log(\"owner : \" + owner);\n                onlyLeft = 10000 - totalSupplyNFT;\n\n                if (mintAmount > onlyLeft) {\n                  mintAmount = onlyLeft;\n                }\n\n                valueOfNFTs = mintAmount * 0;\n                this.setState({\n                  nftMintingAmount: mintAmount\n                });\n                this.setState({\n                  totalValue: valueOfNFTs\n                });\n              } else {\n                mintAmount = 1;\n\n                if (totalSupplyNFT == 10000) {\n                  onlyLeft = 10000 - publicSale;\n                  mintAmount = onlyLeft;\n                  this.setState({\n                    msg: \"SOLD OUT\"\n                  });\n                } else {\n                  mintAmount = 1;\n                  onlyLeft = maxMintAmountPerTx;\n\n                  if (mintAmount > onlyLeft) {\n                    mintAmount = onlyLeft;\n                  }\n\n                  valueOfNFTs = mintAmount * this.state._cost;\n                  this.setState({\n                    nftMintingAmount: mintAmount\n                  });\n                  this.setState({\n                    totalValue: valueOfNFTs\n                  });\n                }\n              }\n            } catch (err) {\n              console.log(\"err: \" + err);\n            }\n          } else if (web3Modal.cachedProvider == \"walletconnect\") {\n            const chainId = 1;\n\n            if (WalletConnectProvider.networkVersion !== chainId) {\n              try {\n                await WalletConnectProvider.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [{\n                    chainId: web3.utils.toHex(chainId)\n                  }]\n                });\n              } catch (err) {\n                // This error code indicates that the chain has not been added to MetaMask.\n                if (err.code === 4902) {\n                  await window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainName: 'Ethereum Mainnet',\n                      chainId: web3.utils.toHex(chainId),\n                      nativeCurrency: {\n                        name: 'Ethereum Mainnet',\n                        decimals: 18,\n                        symbol: 'ETH'\n                      },\n                      rpcUrls: ['https://mainnet.infura.io/v3/']\n                    }]\n                  });\n                }\n              }\n            }\n\n            try {\n              try {\n                localStorage.setItem('isWalletConnected', true);\n              } catch (ex) {\n                console.log(ex);\n              }\n\n              totalSupplyNFT = await contract.methods.totalSupply().call();\n              this.setState({\n                totalSupply: totalSupplyNFT\n              });\n              console.log(\"Total Supply:\" + totalSupplyNFT);\n              maxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n              this.setState({\n                _maxMintAmountPerTx: maxMintAmountPerTx\n              });\n              console.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n              publicSale = await contract.methods.balanceOf(account).call();\n              this.setState({\n                myNFTWallet: publicSale\n              });\n              cost = await contract.methods.cost().call();\n              this.setState({\n                _cost: cost\n              });\n              console.log(\"cost :\" + cost);\n              owner = await contract.methods.owner().call();\n              this.setState({\n                _owner: owner\n              });\n              console.log(\"Owner\" + owner);\n\n              if (owner == account) {\n                console.log(\"owner : \" + owner);\n                onlyLeft = 10000 - totalSupplyNFT;\n\n                if (mintAmount > onlyLeft) {\n                  mintAmount = onlyLeft;\n                }\n\n                valueOfNFTs = mintAmount * 0;\n                this.setState({\n                  nftMintingAmount: mintAmount\n                });\n                this.setState({\n                  totalValue: valueOfNFTs\n                });\n              } else {\n                mintAmount = 1;\n\n                if (totalSupplyNFT == 10000) {\n                  onlyLeft = 10000 - publicSale;\n                  mintAmount = onlyLeft;\n                  this.setState({\n                    msg: \"SOLD OUT\"\n                  });\n                } else {\n                  mintAmount = 1;\n                  onlyLeft = maxMintAmountPerTx;\n\n                  if (mintAmount > onlyLeft) {\n                    mintAmount = onlyLeft;\n                  }\n\n                  valueOfNFTs = mintAmount * this.state._cost;\n                  this.setState({\n                    nftMintingAmount: mintAmount\n                  });\n                  this.setState({\n                    totalValue: valueOfNFTs\n                  });\n                }\n              }\n            } catch (err) {\n              console.log(\"err: \" + err);\n            }\n          } else if (web3Modal.cachedProvider == \"coinbasewallet\") {\n            const chainId = 1;\n\n            if (CoinbaseWalletProvider.networkVersion !== chainId) {\n              try {\n                await CoinbaseWalletProvider.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [{\n                    chainId: web3.utils.toHex(chainId)\n                  }]\n                });\n              } catch (err) {\n                // This error code indicates that the chain has not been added to MetaMask.\n                if (err.code === 4902) {\n                  await CoinbaseWalletProvider.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainName: 'Ethereum Mainnet',\n                      chainId: web3.utils.toHex(chainId),\n                      nativeCurrency: {\n                        name: 'Ethereum Mainnet',\n                        decimals: 18,\n                        symbol: 'ETH'\n                      },\n                      rpcUrls: ['https://mainnet.infura.io/v3/']\n                    }]\n                  });\n                }\n              }\n            }\n\n            try {\n              try {\n                localStorage.setItem('isWalletConnected', true);\n              } catch (ex) {\n                console.log(ex);\n              }\n\n              totalSupplyNFT = await contract.methods.totalSupply().call();\n              this.setState({\n                totalSupply: totalSupplyNFT\n              });\n              console.log(\"Total Supply:\" + totalSupplyNFT);\n              maxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n              this.setState({\n                _maxMintAmountPerTx: maxMintAmountPerTx\n              });\n              console.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n              publicSale = await contract.methods.balanceOf(account).call();\n              this.setState({\n                myNFTWallet: publicSale\n              });\n              cost = await contract.methods.cost().call();\n              this.setState({\n                _cost: cost\n              });\n              console.log(\"cost :\" + cost);\n              owner = await contract.methods.owner().call();\n              this.setState({\n                _owner: owner\n              });\n              console.log(\"Owner\" + owner);\n\n              if (owner == account) {\n                console.log(\"owner : \" + owner);\n                onlyLeft = 10000 - totalSupplyNFT;\n\n                if (mintAmount > onlyLeft) {\n                  mintAmount = onlyLeft;\n                }\n\n                valueOfNFTs = mintAmount * 0;\n                this.setState({\n                  nftMintingAmount: mintAmount\n                });\n                this.setState({\n                  totalValue: valueOfNFTs\n                });\n              } else {\n                mintAmount = 1;\n\n                if (totalSupplyNFT == 10000) {\n                  onlyLeft = 10000 - publicSale;\n                  mintAmount = onlyLeft;\n                  this.setState({\n                    msg: \"SOLD OUT\"\n                  });\n                } else {\n                  mintAmount = 1;\n                  onlyLeft = maxMintAmountPerTx;\n\n                  if (mintAmount > onlyLeft) {\n                    mintAmount = onlyLeft;\n                  }\n\n                  valueOfNFTs = mintAmount * this.state._cost;\n                  this.setState({\n                    nftMintingAmount: mintAmount\n                  });\n                  this.setState({\n                    totalValue: valueOfNFTs\n                  });\n                }\n              }\n            } catch (err) {\n              console.log(\"err: \" + err);\n            }\n          } //})();\n          //.....................................................................//\n          // Legacy providers may only have ethereum.sendAsync\n\n\n          const chainId = await provider.request({\n            method: 'eth_chainId'\n          });\n        } else {\n          // if the provider is not detected, detectEthereumProvider resolves to null\n          console.error('Please install a Valid Wallet');\n          alert('A valid provider could not be found!');\n        }\n      }\n    };\n\n    this.walletDisconnect = async event => {\n      event.preventDefault();\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider,\n          // required\n          options: {\n            infuraId: \"bf933c3446b3464c988114813a1360ac\" // required\n\n          }\n        }\n      };\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\",\n        // optional\n        cacheProvider: true,\n        // optional\n        providerOptions // required\n\n      }); // disconnect wallet\n\n      web3Modal.clearCachedProvider();\n      window.location.reload();\n\n      try {\n        localStorage.setItem('isWalletConnected', false);\n      } catch (ex) {\n        console.log(ex);\n      }\n    };\n  }\n\n  async componentDidMount() {\n    var _localStorage;\n\n    if (((_localStorage = localStorage) === null || _localStorage === void 0 ? void 0 : _localStorage.getItem('isWalletConnected')) === 'true') {\n      const providerOptions = {\n        walletconnect: {\n          package: WalletConnectProvider,\n          // required\n          options: {\n            infuraId: \"811915bee3744bd38afcf17ecac0f9a6\" // required \n\n          }\n        },\n        coinbasewallet: {\n          package: CoinbaseWalletSDK,\n          // Required\n          options: {\n            appName: \"Aterium Universe\",\n            // Required\n            infuraId: \"811915bee3744bd38afcf17ecac0f9a6\",\n            // Required\n            rpc: \"\",\n            // Optional if `infuraId` is provided; otherwise it's required\n            chainId: 1,\n            // Optional. It defaults to 1 if not provided\n            darkMode: true // Optional. Use dark theme, defaults to false\n\n          }\n        }\n      };\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\",\n        // optional\n        cacheProvider: true,\n        // optional\n        providerOptions // required\n\n      });\n      const provider = await web3Modal.connect(); //  Enable session (triggers QR Code modal)\n\n      await provider.enable();\n      const web3 = new Web3(provider);\n      console.log(\"provider : \" + provider); // Subscribe to accounts change\n\n      provider.on(\"accountsChanged\", accounts => {\n        console.log(accounts);\n      }); // Subscribe to chainId change\n\n      provider.on(\"chainChanged\", chainId => {\n        console.log(chainId);\n      }); // Subscribe to provider connection\n\n      provider.on(\"connect\", info => {\n        console.log(info);\n        console.log(\"I'm LOGGED IN\");\n      }); // Subscribe to provider disconnection\n\n      provider.on(\"disconnect\", error => {\n        console.log(error);\n      }); // test if wallet is connected\n\n      if (web3Modal.cachedProvider) {\n        // connected now you can get accounts\n        console.log(\"web3Modal.cachedProvider :\" + web3Modal.cachedProvider);\n        console.log(\"provider :\" + provider);\n        const accounts = await web3.eth.getAccounts();\n        account = accounts[0];\n        this.setState({\n          walletAddress: account\n        });\n        contract = new web3.eth.Contract(ABI, address);\n        console.log(\"contract :\" + contract);\n\n        if (provider) {\n          //\t(async () => {\n          // when Metamask\n          if (web3Modal.cachedProvider != \"walletconnect\" && web3Modal.cachedProvider != \"coinbasewallet\") {\n            const chainId = 1;\n\n            if (window.ethereum.networkVersion !== chainId) {\n              try {\n                await window.ethereum.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [{\n                    chainId: web3.utils.toHex(chainId)\n                  }]\n                });\n              } catch (err) {\n                // This error code indicates that the chain has not been added to MetaMask.\n                if (err.code === 4902) {\n                  await window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainName: 'Ethereum Mainnet',\n                      chainId: web3.utils.toHex(chainId),\n                      nativeCurrency: {\n                        name: 'Ethereum Mainnet',\n                        decimals: 18,\n                        symbol: 'ETH'\n                      },\n                      rpcUrls: ['https://mainnet.infura.io/v3/']\n                    }]\n                  });\n                }\n              }\n            }\n\n            try {\n              try {\n                localStorage.setItem('isWalletConnected', true);\n              } catch (ex) {\n                console.log(ex);\n              }\n\n              totalSupplyNFT = await contract.methods.totalSupply().call();\n              this.setState({\n                totalSupply: totalSupplyNFT\n              });\n              console.log(\"Total Supply:\" + totalSupplyNFT);\n              maxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n              this.setState({\n                _maxMintAmountPerTx: maxMintAmountPerTx\n              });\n              console.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n              publicSale = await contract.methods.balanceOf(account).call();\n              this.setState({\n                myNFTWallet: publicSale\n              });\n              cost = await contract.methods.cost().call();\n              this.setState({\n                _cost: cost\n              });\n              console.log(\"cost :\" + cost);\n              owner = await contract.methods.owner().call();\n              this.setState({\n                _owner: owner\n              });\n              console.log(\"Owner\" + owner);\n\n              if (owner == account) {\n                console.log(\"owner : \" + owner);\n                onlyLeft = 10000 - totalSupplyNFT;\n\n                if (mintAmount > onlyLeft) {\n                  mintAmount = onlyLeft;\n                }\n\n                valueOfNFTs = mintAmount * 0;\n                this.setState({\n                  nftMintingAmount: mintAmount\n                });\n                this.setState({\n                  totalValue: valueOfNFTs\n                });\n              } else {\n                mintAmount = 1;\n\n                if (totalSupplyNFT == 10000) {\n                  onlyLeft = 10000 - publicSale;\n                  mintAmount = onlyLeft;\n                  this.setState({\n                    msg: \"SOLD OUT\"\n                  });\n                } else {\n                  mintAmount = 1;\n                  onlyLeft = maxMintAmountPerTx;\n\n                  if (mintAmount > onlyLeft) {\n                    mintAmount = onlyLeft;\n                  }\n\n                  valueOfNFTs = mintAmount * this.state._cost;\n                  this.setState({\n                    nftMintingAmount: mintAmount\n                  });\n                  this.setState({\n                    totalValue: valueOfNFTs\n                  });\n                }\n              }\n            } catch (err) {\n              console.log(\"err: \" + err);\n            }\n          } else if (web3Modal.cachedProvider == \"walletconnect\") {\n            const chainId = 1;\n\n            if (WalletConnectProvider.networkVersion !== chainId) {\n              try {\n                await WalletConnectProvider.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [{\n                    chainId: web3.utils.toHex(chainId)\n                  }]\n                });\n              } catch (err) {\n                // This error code indicates that the chain has not been added to MetaMask.\n                if (err.code === 4902) {\n                  await window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainName: 'Ethereum Mainnet',\n                      chainId: web3.utils.toHex(chainId),\n                      nativeCurrency: {\n                        name: 'Ethereum Mainnet',\n                        decimals: 18,\n                        symbol: 'ETH'\n                      },\n                      rpcUrls: ['https://mainnet.infura.io/v3/']\n                    }]\n                  });\n                }\n              }\n            }\n\n            try {\n              try {\n                localStorage.setItem('isWalletConnected', true);\n              } catch (ex) {\n                console.log(ex);\n              }\n\n              totalSupplyNFT = await contract.methods.totalSupply().call();\n              this.setState({\n                totalSupply: totalSupplyNFT\n              });\n              console.log(\"Total Supply:\" + totalSupplyNFT);\n              maxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n              this.setState({\n                _maxMintAmountPerTx: maxMintAmountPerTx\n              });\n              console.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n              publicSale = await contract.methods.balanceOf(account).call();\n              this.setState({\n                myNFTWallet: publicSale\n              });\n              cost = await contract.methods.cost().call();\n              this.setState({\n                _cost: cost\n              });\n              console.log(\"cost :\" + cost);\n              owner = await contract.methods.owner().call();\n              this.setState({\n                _owner: owner\n              });\n              console.log(\"Owner\" + owner);\n\n              if (owner == account) {\n                console.log(\"owner : \" + owner);\n                onlyLeft = 10000 - totalSupplyNFT;\n\n                if (mintAmount > onlyLeft) {\n                  mintAmount = onlyLeft;\n                }\n\n                valueOfNFTs = mintAmount * 0;\n                this.setState({\n                  nftMintingAmount: mintAmount\n                });\n                this.setState({\n                  totalValue: valueOfNFTs\n                });\n              } else {\n                mintAmount = 1;\n\n                if (totalSupplyNFT == 10000) {\n                  onlyLeft = 10000 - publicSale;\n                  mintAmount = onlyLeft;\n                  this.setState({\n                    msg: \"SOLD OUT\"\n                  });\n                } else {\n                  mintAmount = 1;\n                  onlyLeft = maxMintAmountPerTx;\n\n                  if (mintAmount > onlyLeft) {\n                    mintAmount = onlyLeft;\n                  }\n\n                  valueOfNFTs = mintAmount * this.state._cost;\n                  this.setState({\n                    nftMintingAmount: mintAmount\n                  });\n                  this.setState({\n                    totalValue: valueOfNFTs\n                  });\n                }\n              }\n            } catch (err) {\n              console.log(\"err: \" + err);\n            }\n          } else if (web3Modal.cachedProvider == \"coinbasewallet\") {\n            const chainId = 1;\n\n            if (CoinbaseWalletProvider.networkVersion !== chainId) {\n              try {\n                await CoinbaseWalletProvider.request({\n                  method: 'wallet_switchEthereumChain',\n                  params: [{\n                    chainId: web3.utils.toHex(chainId)\n                  }]\n                });\n              } catch (err) {\n                // This error code indicates that the chain has not been added to MetaMask.\n                if (err.code === 4902) {\n                  await CoinbaseWalletProvider.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainName: 'Ethereum Mainnet',\n                      chainId: web3.utils.toHex(chainId),\n                      nativeCurrency: {\n                        name: 'Ethereum Mainnet',\n                        decimals: 18,\n                        symbol: 'ETH'\n                      },\n                      rpcUrls: ['https://mainnet.infura.io/v3/']\n                    }]\n                  });\n                }\n              }\n            }\n\n            try {\n              try {\n                localStorage.setItem('isWalletConnected', true);\n              } catch (ex) {\n                console.log(ex);\n              }\n\n              totalSupplyNFT = await contract.methods.totalSupply().call();\n              this.setState({\n                totalSupply: totalSupplyNFT\n              });\n              console.log(\"Total Supply:\" + totalSupplyNFT);\n              maxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n              this.setState({\n                _maxMintAmountPerTx: maxMintAmountPerTx\n              });\n              console.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n              publicSale = await contract.methods.balanceOf(account).call();\n              this.setState({\n                myNFTWallet: publicSale\n              });\n              cost = await contract.methods.cost().call();\n              this.setState({\n                _cost: cost\n              });\n              console.log(\"cost :\" + cost);\n              owner = await contract.methods.owner().call();\n              this.setState({\n                _owner: owner\n              });\n              console.log(\"Owner\" + owner);\n\n              if (owner == account) {\n                console.log(\"owner : \" + owner);\n                onlyLeft = 10000 - totalSupplyNFT;\n\n                if (mintAmount > onlyLeft) {\n                  mintAmount = onlyLeft;\n                }\n\n                valueOfNFTs = mintAmount * 0;\n                this.setState({\n                  nftMintingAmount: mintAmount\n                });\n                this.setState({\n                  totalValue: valueOfNFTs\n                });\n              } else {\n                mintAmount = 1;\n\n                if (totalSupplyNFT == 10000) {\n                  onlyLeft = 10000 - publicSale;\n                  mintAmount = onlyLeft;\n                  this.setState({\n                    msg: \"SOLD OUT\"\n                  });\n                } else {\n                  mintAmount = 1;\n                  onlyLeft = maxMintAmountPerTx;\n\n                  if (mintAmount > onlyLeft) {\n                    mintAmount = onlyLeft;\n                  }\n\n                  valueOfNFTs = mintAmount * this.state._cost;\n                  this.setState({\n                    nftMintingAmount: mintAmount\n                  });\n                  this.setState({\n                    totalValue: valueOfNFTs\n                  });\n                }\n              }\n            } catch (err) {\n              console.log(\"err: \" + err);\n            }\n          } //})();\n          //.....................................................................//\n          // Legacy providers may only have ethereum.sendAsync\n\n\n          const chainId = await provider.request({\n            method: 'eth_chainId'\n          });\n        } else {\n          // if the provider is not detected, detectEthereumProvider resolves to null\n          console.error('Please install a Valid Wallet');\n          alert('A valid provider could not be found!');\n        }\n      }\n    } else {\n      console.log(\"NOT CONNECTED\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"allWrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1658,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"cont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"headers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1661,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"headers2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1663,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1665,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      class: \"logoPic\",\n      onClick: homeLink,\n      src: logo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1665,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1667,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1669,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"socialIcon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1670,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: homeLink,\n      src: home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1670,\n        columnNumber: 35\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"socialIcon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1671,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: ops,\n      src: os,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1671,\n        columnNumber: 35\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"socialIcon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1672,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      onClick: tweet,\n      src: twitter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1672,\n        columnNumber: 35\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"connect2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1675,\n        columnNumber: 10\n      }\n    }, this.state.walletAddress === '' ? /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.walletConnect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1677,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"wallet2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1678,\n        columnNumber: 13\n      }\n    }, \"Wallet Connect\")) : /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.walletDisconnect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"wallet2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 63\n      }\n    }, this.state.walletAddress.slice(0, 3) + \"...\" + this.state.walletAddress.slice(39, 42))))))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"introduction\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1689,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"in2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1691,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692,\n        columnNumber: 9\n      }\n    }, \"\\uD558\\uC774\\uB4DC\\uBBF8\\uD50C\\uB9AC\\uC988 \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1693,\n        columnNumber: 18\n      }\n    }), \" 3\\uCC28 NFT\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"nftblockWalletConnectedALL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1700,\n        columnNumber: 9\n      }\n    }, this.state.walletAddress === '' ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"walletConnect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1702,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.walletConnect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1703,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"wallet3\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1704,\n        columnNumber: 13\n      }\n    }, \"MINT NOW\"))) : null)), this.state.walletAddress === '' ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"nftPicDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1713,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      class: \"nftPic\",\n      src: \"https://cdn.discordapp.com/attachments/1050552088779825176/1132041926456119367/hmp_nft.gif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1714,\n        columnNumber: 10\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      class: \"mintDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1717,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"totalSupply\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1718,\n        columnNumber: 11\n      }\n    }, this.state.totalSupply, \" / 10000\"), this.state._maxMintAmountPerTx == this.state.myNFTWallet ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1721,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1721,\n        columnNumber: 32\n      }\n    }, \"Limit Reached!\")) : /*#__PURE__*/React.createElement(\"div\", {\n      class: \"price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1722,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1722,\n        columnNumber: 32\n      }\n    }, \"Mint Price \", this.state._cost / 1000000000000000000, \" ETH\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"minting_count_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1724,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1726,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmitMinus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1727,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btnfos-0-2\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1728,\n        columnNumber: 14\n      }\n    }, \"-\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1732,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"nftminter2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1733,\n        columnNumber: 13\n      }\n    }, this.state.nftMintingAmount)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1737,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmitPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1738,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btnfos-0-2\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1739,\n        columnNumber: 14\n      }\n    }, \"+\")))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"mintbuttondiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1744,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1745,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btnfos-0-3\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1746,\n        columnNumber: 13\n      }\n    }, this.state._publicMintMsg))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1751,\n        columnNumber: 11\n      }\n    }, this.state.statusError ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"errorMessage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1754,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1755,\n        columnNumber: 14\n      }\n    }, \"Sorry, something went wrong \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1755,\n        columnNumber: 48\n      }\n    }), \" please try again later\")) : null, this.state.statusLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"loadingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1760,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"loadingText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1761,\n        columnNumber: 14\n      }\n    }, \"Minting your NFT\")) : null, this.state.success ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"successfully\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1766,\n        columnNumber: 13\n      }\n    }, \"MINTING SUCCESSFUL!\") : null))))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/echoi33/Documents/HMP/hmp-mint/src/App.js"],"names":["React","Component","Web3","Web3Modal","WalletConnectProvider","CoinbaseWalletSDK","CoinbaseWalletProvider","logo","os","twitter","home","Scroll","require","ops","window","open","tweet","homeLink","account","mintAmount","valueOfNFTs","totalSupplyNFT","maxMintNFTs","onlyLeft","owner","publicSale","cost","maxMintAmountPerTx","publicMintMsg","ABI","address","contract","Home","state","walletAddress","totalSupply","onlyLeftAmount","statusError","statusLoading","success","nftMintingAmount","totalValue","maxmint","_publicMintMsg","_cost","_maxMintAmountPerTx","_owner","onSubmitMinus","event","preventDefault","console","log","setState","onSubmitPlus","onSubmit2","methods","call","mint","send","gasLimit","from","value","Promise","resolve","setTimeout","location","reload","err","errorMassage","message","walletConnect","providerOptions","walletconnect","package","options","infuraId","coinbasewallet","appName","rpc","chainId","darkMode","web3Modal","network","cacheProvider","provider","connect","enable","web3","on","accounts","info","error","cachedProvider","eth","getAccounts","Contract","ethereum","networkVersion","request","method","params","utils","toHex","code","chainName","nativeCurrency","name","decimals","symbol","rpcUrls","localStorage","setItem","ex","balanceOf","myNFTWallet","msg","alert","walletDisconnect","clearCachedProvider","componentDidMount","getItem","render","slice"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport CoinbaseWalletSDK, { CoinbaseWalletProvider } from \"@coinbase/wallet-sdk\";\nimport logo from './assets/Logo.png';\nimport os from './assets/os.png';\nimport twitter from './assets/twitter.png';\nimport home from './assets/home-button.png';\n \nvar Scroll = require('react-scroll');\n\nconst ops = () => {\n\twindow.open(\"https://opensea.io/collection/hime-me-please-3rd\");\n}\n\nconst tweet = () => {\n\twindow.open(\"https://twitter.com/_hidemeplease\");\n}\n\nconst homeLink = () => {\n\twindow.open(\"https://hidemeplease.xyz/\");\n}\n\nlet account;\nlet mintAmount = 1;\nlet valueOfNFTs = 0;\nlet totalSupplyNFT;\nlet maxMintNFTs;\nlet onlyLeft;\nlet owner;\nlet publicSale;;\nlet cost = '';\nlet maxMintAmountPerTx = '';\nlet publicMintMsg = \"Public Mint\";\n\nlet ABI = [\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"approved\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"Approval\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"operator\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"approved\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"ApprovalForAll\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"previousOwner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"newOwner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"OwnershipTransferred\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"to\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"Transfer\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"to\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"approve\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"balanceOf\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"cost\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getApproved\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"hiddenMetadataUri\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"operator\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"isApprovedForAll\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"maxMintAmountPerTx\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"maxSupply\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_mintAmount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"mint\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_mintAmount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"_receiver\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"mintForAddress\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"name\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"owner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"ownerOf\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"paused\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"renounceOwnership\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"revealed\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"to\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"safeTransferFrom\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"to\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bytes\",\n\t\t\t\t\"name\": \"data\",\n\t\t\t\t\"type\": \"bytes\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"safeTransferFrom\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"operator\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"approved\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setApprovalForAll\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_cost\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setCost\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_hiddenMetadataUri\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setHiddenMetadataUri\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_maxMintAmountPerTx\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setMaxMintAmountPerTx\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"_state\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setPaused\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"_state\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setRevealed\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_uriPrefix\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setUriPrefix\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_uriSuffix\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setUriSuffix\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bytes4\",\n\t\t\t\t\"name\": \"interfaceId\",\n\t\t\t\t\"type\": \"bytes4\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"supportsInterface\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"symbol\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"tokenURI\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"totalSupply\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"to\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"transferFrom\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"newOwner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"transferOwnership\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"uriPrefix\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"uriSuffix\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"_owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"walletOfOwner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256[]\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"withdraw\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t}\n];\n\nlet address = \"0x1cBBF5BA9362d60747F149d4c2E35f72e1a74bC3\";\n\nlet contract;\n\nclass Home extends Component {\n\n\tstate = {\n\t\twalletAddress: \"\",\n\t\ttotalSupply: \"\",\n\t\tonlyLeftAmount: \"\",\n\t\tstatusError: false,\n\t\tstatusLoading: false,\n\t\tsuccess: false,\n\t\tnftMintingAmount: '1',\n\t\ttotalValue: \"\",\n\t\tmaxmint: '',\n\t\t_publicMintMsg: 'Mint Now',\n\t\t_cost: 0,\n\t\t_maxMintAmountPerTx: '',\n\t\t_owner: ''\n\t}\n\n\tasync componentDidMount() {\n\n\t\tif (localStorage?.getItem('isWalletConnected') === 'true') {\n\n\t\t\tconst providerOptions = {\n\t\t\t\twalletconnect: {\n\t\t\t\t\tpackage: WalletConnectProvider, // required\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tinfuraId: \"811915bee3744bd38afcf17ecac0f9a6\" // required \n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcoinbasewallet: {\n\t\t\t\t\tpackage: CoinbaseWalletSDK, // Required\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tappName: \"Aterium Universe\", // Required\n\t\t\t\t\t\tinfuraId: \"811915bee3744bd38afcf17ecac0f9a6\", // Required\n\t\t\t\t\t\trpc: \"\", // Optional if `infuraId` is provided; otherwise it's required\n\t\t\t\t\t\tchainId: 1, // Optional. It defaults to 1 if not provided\n\t\t\t\t\t\tdarkMode: true // Optional. Use dark theme, defaults to false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst web3Modal = new Web3Modal({\n\t\t\t\tnetwork: \"mainnet\", // optional\n\t\t\t\tcacheProvider: true, // optional\n\t\t\t\tproviderOptions // required\n\t\t\t});\n\n\t\t\tconst provider = await web3Modal.connect();\n\n\t\t\t//  Enable session (triggers QR Code modal)\n\t\t\tawait provider.enable();\n\n\t\t\tconst web3 = new Web3(provider);\n\t\t\tconsole.log(\"provider : \" + provider);\n\t\t\t// Subscribe to accounts change\n\t\t\tprovider.on(\"accountsChanged\", (accounts) => {\n\t\t\t\tconsole.log(accounts);\n\t\t\t});\n\n\t\t\t// Subscribe to chainId change\n\t\t\tprovider.on(\"chainChanged\", (chainId) => {\n\t\t\t\tconsole.log(chainId);\n\t\t\t});\n\n\t\t\t// Subscribe to provider connection\n\t\t\tprovider.on(\"connect\", (info) => {\n\t\t\t\tconsole.log(info);\n\t\t\t\tconsole.log(\"I'm LOGGED IN\");\n\t\t\t});\n\n\t\t\t// Subscribe to provider disconnection\n\t\t\tprovider.on(\"disconnect\", (error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\n\t\t\t// test if wallet is connected\n\t\t\tif (web3Modal.cachedProvider) {\n\t\t\t\t// connected now you can get accounts\n\t\t\t\tconsole.log(\"web3Modal.cachedProvider :\" + web3Modal.cachedProvider);\n\t\t\t\tconsole.log(\"provider :\" + provider);\n\n\t\t\t\tconst accounts = await web3.eth.getAccounts();\n\n\t\t\t\taccount = accounts[0];\n\t\t\t\tthis.setState({ walletAddress: account });\n\n\t\t\t\tcontract = new web3.eth.Contract(ABI, address);\n\t\t\t\tconsole.log(\"contract :\" + contract);\n\n\t\t\t\tif (provider) {\n\n\n\t\t\t\t\t//\t(async () => {\n\n\t\t\t\t\t// when Metamask\n\t\t\t\t\tif (web3Modal.cachedProvider != \"walletconnect\" && web3Modal.cachedProvider != \"coinbasewallet\") {\n\n\t\t\t\t\t\tconst chainId = 1;\n\n\t\t\t\t\t\tif (window.ethereum.networkVersion !== chainId) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\t\t\t\t\tparams: [{ chainId: web3.utils.toHex(chainId) }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// This error code indicates that the chain has not been added to MetaMask.\n\t\t\t\t\t\t\t\tif (err.code === 4902) {\n\t\t\t\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tchainName: 'Ethereum Mainnet',\n\t\t\t\t\t\t\t\t\t\t\t\tchainId: web3.utils.toHex(chainId),\n\t\t\t\t\t\t\t\t\t\t\t\tnativeCurrency: { name: 'Ethereum Mainnet', decimals: 18, symbol: 'ETH' },\n\t\t\t\t\t\t\t\t\t\t\t\trpcUrls: ['https://mainnet.infura.io/v3/'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlocalStorage.setItem('isWalletConnected', true);\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\tconsole.log(ex)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttotalSupplyNFT = await contract.methods.totalSupply().call();\n\t\t\t\t\t\t\tthis.setState({ totalSupply: totalSupplyNFT });\n\t\t\t\t\t\t\tconsole.log(\"Total Supply:\" + totalSupplyNFT);\n\n\t\t\t\t\t\t\tmaxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n\t\t\t\t\t\t\tthis.setState({ _maxMintAmountPerTx: maxMintAmountPerTx });\n\t\t\t\t\t\t\tconsole.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n\n\t\t\t\t\t\t\tpublicSale = await contract.methods.balanceOf(account).call();\n\t\t\t\t\t\t\tthis.setState({ myNFTWallet: publicSale });\n\n\t\t\t\t\t\t\tcost = await contract.methods.cost().call();\n\t\t\t\t\t\t\tthis.setState({ _cost: cost });\n\t\t\t\t\t\t\tconsole.log(\"cost :\" + cost);\n\n\t\t\t\t\t\t\towner = await contract.methods.owner().call();\n\t\t\t\t\t\t\tthis.setState({ _owner: owner });\n\t\t\t\t\t\t\tconsole.log(\"Owner\" + owner);\n\n\t\t\t\t\t\t\tif (owner == account) {\n\t\t\t\t\t\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\t\t\t\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tmintAmount = 1;\n\n\t\t\t\t\t\t\t\tif (totalSupplyNFT == 10000) {\n\n\t\t\t\t\t\t\t\t\tonlyLeft = 10000 - publicSale;\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t\tthis.setState({ msg: \"SOLD OUT\" });\n\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmintAmount = 1;\n\t\t\t\t\t\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\n\t\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.log(\"err: \" + err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (web3Modal.cachedProvider == \"walletconnect\") {\n\n\t\t\t\t\t\tconst chainId = 1;\n\n\t\t\t\t\t\tif (WalletConnectProvider.networkVersion !== chainId) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait WalletConnectProvider.request({\n\t\t\t\t\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\t\t\t\t\tparams: [{ chainId: web3.utils.toHex(chainId) }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// This error code indicates that the chain has not been added to MetaMask.\n\t\t\t\t\t\t\t\tif (err.code === 4902) {\n\t\t\t\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tchainName: 'Ethereum Mainnet',\n\t\t\t\t\t\t\t\t\t\t\t\tchainId: web3.utils.toHex(chainId),\n\t\t\t\t\t\t\t\t\t\t\t\tnativeCurrency: { name: 'Ethereum Mainnet', decimals: 18, symbol: 'ETH' },\n\t\t\t\t\t\t\t\t\t\t\t\trpcUrls: ['https://mainnet.infura.io/v3/'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlocalStorage.setItem('isWalletConnected', true);\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\tconsole.log(ex)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttotalSupplyNFT = await contract.methods.totalSupply().call();\n\t\t\t\t\t\t\tthis.setState({ totalSupply: totalSupplyNFT });\n\t\t\t\t\t\t\tconsole.log(\"Total Supply:\" + totalSupplyNFT);\n\n\t\t\t\t\t\t\tmaxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n\t\t\t\t\t\t\tthis.setState({ _maxMintAmountPerTx: maxMintAmountPerTx });\n\t\t\t\t\t\t\tconsole.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n\n\t\t\t\t\t\t\tpublicSale = await contract.methods.balanceOf(account).call();\n\t\t\t\t\t\t\tthis.setState({ myNFTWallet: publicSale });\n\n\t\t\t\t\t\t\tcost = await contract.methods.cost().call();\n\t\t\t\t\t\t\tthis.setState({ _cost: cost });\n\t\t\t\t\t\t\tconsole.log(\"cost :\" + cost);\n\n\t\t\t\t\t\t\towner = await contract.methods.owner().call();\n\t\t\t\t\t\t\tthis.setState({ _owner: owner });\n\t\t\t\t\t\t\tconsole.log(\"Owner\" + owner);\n\n\n\t\t\t\t\t\t\tif (owner == account) {\n\t\t\t\t\t\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\t\t\t\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmintAmount = 1;\n\n\t\t\t\t\t\t\t\tif (totalSupplyNFT == 10000) {\n\n\t\t\t\t\t\t\t\t\tonlyLeft = 10000 - publicSale;\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t\tthis.setState({ msg: \"SOLD OUT\" });\n\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmintAmount = 1;\n\t\t\t\t\t\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\n\t\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.log(\"err: \" + err);\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else if (web3Modal.cachedProvider == \"coinbasewallet\") {\n\n\t\t\t\t\t\tconst chainId = 1;\n\n\t\t\t\t\t\tif (CoinbaseWalletProvider.networkVersion !== chainId) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait CoinbaseWalletProvider.request({\n\t\t\t\t\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\t\t\t\t\tparams: [{ chainId: web3.utils.toHex(chainId) }],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// This error code indicates that the chain has not been added to MetaMask.\n\t\t\t\t\t\t\t\tif (err.code === 4902) {\n\t\t\t\t\t\t\t\t\tawait CoinbaseWalletProvider.request({\n\t\t\t\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tchainName: 'Ethereum Mainnet',\n\t\t\t\t\t\t\t\t\t\t\t\tchainId: web3.utils.toHex(chainId),\n\t\t\t\t\t\t\t\t\t\t\t\tnativeCurrency: { name: 'Ethereum Mainnet', decimals: 18, symbol: 'ETH' },\n\t\t\t\t\t\t\t\t\t\t\t\trpcUrls: ['https://mainnet.infura.io/v3/'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlocalStorage.setItem('isWalletConnected', true);\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\tconsole.log(ex)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttotalSupplyNFT = await contract.methods.totalSupply().call();\n\t\t\t\t\t\t\tthis.setState({ totalSupply: totalSupplyNFT });\n\t\t\t\t\t\t\tconsole.log(\"Total Supply:\" + totalSupplyNFT);\n\n\t\t\t\t\t\t\tmaxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n\t\t\t\t\t\t\tthis.setState({ _maxMintAmountPerTx: maxMintAmountPerTx });\n\t\t\t\t\t\t\tconsole.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n\n\t\t\t\t\t\t\tpublicSale = await contract.methods.balanceOf(account).call();\n\t\t\t\t\t\t\tthis.setState({ myNFTWallet: publicSale });\n\n\t\t\t\t\t\t\tcost = await contract.methods.cost().call();\n\t\t\t\t\t\t\tthis.setState({ _cost: cost });\n\t\t\t\t\t\t\tconsole.log(\"cost :\" + cost);\n\n\t\t\t\t\t\t\towner = await contract.methods.owner().call();\n\t\t\t\t\t\t\tthis.setState({ _owner: owner });\n\t\t\t\t\t\t\tconsole.log(\"Owner\" + owner);\n\n\n\t\t\t\t\t\t\tif (owner == account) {\n\t\t\t\t\t\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\t\t\t\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmintAmount = 1;\n\n\t\t\t\t\t\t\t\tif (totalSupplyNFT == 10000) {\n\t\t\t\t\t\t\t\t\tonlyLeft = 10000 - publicSale;\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t\tthis.setState({ msg: \"SOLD OUT\" });\n\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmintAmount = 1;\n\t\t\t\t\t\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\n\t\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.log(\"err: \" + err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\t//})();\n\n\t\t\t\t\t//.....................................................................//\n\n\t\t\t\t\t// Legacy providers may only have ethereum.sendAsync\n\t\t\t\t\tconst chainId = await provider.request({\n\t\t\t\t\t\tmethod: 'eth_chainId'\n\t\t\t\t\t})\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if the provider is not detected, detectEthereumProvider resolves to null\n\t\t\t\t\tconsole.error('Please install a Valid Wallet');\n\t\t\t\t\talert('A valid provider could not be found!');\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tconsole.log(\"NOT CONNECTED\");\n\t\t}\n\n\t}\n\n\tonSubmitMinus = async event => {\n\t\tevent.preventDefault();\n\n\t\tmintAmount = mintAmount - 1;\n\n\t\tif (mintAmount < 1) {\n\t\t\tmintAmount = 1\n\t\t}\n\n\t\tif (owner == account) {\n\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\tmintAmount = onlyLeft;\n\t\t\t}\n\n\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t} else {\n\n\t\t\tif (totalSupplyNFT < 10000) {\n\t\t\t\tonlyLeft = maxMintAmountPerTx - publicSale;\n\n\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t}\n\n\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t}\n\t\t}\n\t}\n\n\tonSubmitPlus = async event => {\n\t\tevent.preventDefault();\n\n\t\t//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n\t\tmintAmount = mintAmount + 1;\n\n\t\tif (owner == account) {\n\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\tmintAmount = onlyLeft;\n\t\t\t}\n\n\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t} else {\n\n\t\t\tif (totalSupplyNFT < 10000) {\n\n\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\t\t\t\tconsole.log(onlyLeft);\n\n\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t}\n\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t}\n\t\t}\n\t}\n\n\tonSubmit2 = async event => {\n\t\tevent.preventDefault();\n\n\t\tconsole.log(this.state.walletAddress);\n\n\t\ttry {\n\n\t\t\tlet owner = await contract.methods.owner().call();\n\n\t\t\tif (account != owner) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tconsole.log(\"minAmount:\" + mintAmount);\n\t\t\t\t\tconsole.log(\"valueOfNFTs:\" + valueOfNFTs);\n\t\t\t\t\tconsole.log(\"cost : \" + this.state.totalValue);\n\n\t\t\t\t\tthis.setState({ statusError: false, statusLoading: true });\n\t\t\t\t\tawait contract.methods.mint(mintAmount * 1).send({ gasLimit: 385000, from: account, value: this.state.totalValue * 1 });\n\t\t\t\t\tthis.setState({ statusLoading: false, success: true });\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 5000));\n\t\t\t\t\twindow.location.reload();\n\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.setState({ errorMassage: \"ERROR : \" + err.message, statusLoading: false, success: false, statusError: true });\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tconsole.log(\"minAmount:\" + mintAmount);\n\t\t\t\t\tconsole.log(\"valueOfNFTs:\" + valueOfNFTs);\n\n\t\t\t\t\tthis.setState({ statusError: false, statusLoading: true });\n\t\t\t\t\tawait contract.methods.mint(mintAmount * 1).send({ gasLimit: 385000, from: account, value: this.state.totalValue * 0 });\n\t\t\t\t\tthis.setState({ statusLoading: false, success: true });\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 5000));\n\t\t\t\t\twindow.location.reload();\n\n\t\t\t\t} catch (err) {\n\n\t\t\t\t\tthis.setState({ errorMassage: \"ERROR : \" + err.message, statusLoading: false, success: false, statusError: true });\n\t\t\t\t\tconsole.log(err);\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\twalletConnect = async event => {\n\t\tevent.preventDefault();\n\n\t\tconst providerOptions = {\n\t\t\twalletconnect: {\n\t\t\t\tpackage: WalletConnectProvider, // required\n\t\t\t\toptions: {\n\t\t\t\t\tinfuraId: \"811915bee3744bd38afcf17ecac0f9a6\" // required\n\t\t\t\t}\n\t\t\t},\n\t\t\tcoinbasewallet: {\n\t\t\t\tpackage: CoinbaseWalletSDK, // Required\n\t\t\t\toptions: {\n\t\t\t\t\tappName: \"Aterium Universe\", // Required\n\t\t\t\t\tinfuraId: \"811915bee3744bd38afcf17ecac0f9a6\", // Required\n\t\t\t\t\trpc: \"\", // Optional if `infuraId` is provided; otherwise it's required\n\t\t\t\t\tchainId: 1, // Optional. It defaults to 1 if not provided\n\t\t\t\t\tdarkMode: true // Optional. Use dark theme, defaults to false\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst web3Modal = new Web3Modal({\n\t\t\tnetwork: \"mainnet\", // optional\n\t\t\tcacheProvider: true, // optional\n\t\t\tproviderOptions // required\n\t\t});\n\n\t\tconst provider = await web3Modal.connect();\n\n\t\t//  Enable session (triggers QR Code modal)\n\t\tawait provider.enable();\n\n\t\tconst web3 = new Web3(provider);\n\t\tconsole.log(\"provider : \" + provider);\n\t\t// Subscribe to accounts change\n\t\tprovider.on(\"accountsChanged\", (accounts) => {\n\t\t\tconsole.log(accounts);\n\t\t});\n\n\t\t// Subscribe to chainId change\n\t\tprovider.on(\"chainChanged\", (chainId) => {\n\t\t\tconsole.log(chainId);\n\t\t});\n\n\t\t// Subscribe to provider connection\n\t\tprovider.on(\"connect\", (info) => {\n\t\t\tconsole.log(info);\n\t\t\tconsole.log(\"I'm LOGGED IN\");\n\t\t});\n\n\t\t// Subscribe to provider disconnection\n\t\tprovider.on(\"disconnect\", (error) => {\n\t\t\tconsole.log(error);\n\t\t});\n\n\t\t// test if wallet is connected\n\t\tif (web3Modal.cachedProvider) {\n\t\t\t// connected now you can get accounts\n\t\t\tconsole.log(\"web3Modal.cachedProvider :\" + web3Modal.cachedProvider);\n\t\t\tconsole.log(\"provider :\" + provider);\n\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\n\t\t\taccount = accounts[0];\n\t\t\tthis.setState({ walletAddress: account });\n\n\t\t\tcontract = new web3.eth.Contract(ABI, address);\n\t\t\tconsole.log(\"contract :\" + contract);\n\n\t\t\tif (provider) {\n\n\n\t\t\t\t//\t(async () => {\n\n\t\t\t\tif (web3Modal.cachedProvider != \"walletconnect\" && web3Modal.cachedProvider != \"coinbasewallet\") {\n\n\t\t\t\t\tconst chainId = 1;\n\n\t\t\t\t\tif (window.ethereum.networkVersion !== chainId) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\t\t\t\tparams: [{ chainId: web3.utils.toHex(chainId) }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t// This error code indicates that the chain has not been added to MetaMask.\n\t\t\t\t\t\t\tif (err.code === 4902) {\n\t\t\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tchainName: 'Ethereum Mainnet',\n\t\t\t\t\t\t\t\t\t\t\tchainId: web3.utils.toHex(chainId),\n\t\t\t\t\t\t\t\t\t\t\tnativeCurrency: { name: 'Ethereum Mainnet', decimals: 18, symbol: 'ETH' },\n\t\t\t\t\t\t\t\t\t\t\trpcUrls: ['https://mainnet.infura.io/v3/'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlocalStorage.setItem('isWalletConnected', true);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\tconsole.log(ex)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttotalSupplyNFT = await contract.methods.totalSupply().call();\n\t\t\t\t\t\tthis.setState({ totalSupply: totalSupplyNFT });\n\t\t\t\t\t\tconsole.log(\"Total Supply:\" + totalSupplyNFT);\n\n\t\t\t\t\t\tmaxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n\t\t\t\t\t\tthis.setState({ _maxMintAmountPerTx: maxMintAmountPerTx });\n\t\t\t\t\t\tconsole.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n\n\t\t\t\t\t\tpublicSale = await contract.methods.balanceOf(account).call();\n\t\t\t\t\t\tthis.setState({ myNFTWallet: publicSale });\n\n\t\t\t\t\t\tcost = await contract.methods.cost().call();\n\t\t\t\t\t\tthis.setState({ _cost: cost });\n\t\t\t\t\t\tconsole.log(\"cost :\" + cost);\n\n\t\t\t\t\t\towner = await contract.methods.owner().call();\n\t\t\t\t\t\tthis.setState({ _owner: owner });\n\t\t\t\t\t\tconsole.log(\"Owner\" + owner);\n\n\t\t\t\t\t\tif (owner == account) {\n\t\t\t\t\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\t\t\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmintAmount = 1;\n\n\t\t\t\t\t\t\tif (totalSupplyNFT == 10000) {\n\n\t\t\t\t\t\t\t\tonlyLeft = 10000 - publicSale;\n\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\tthis.setState({ msg: \"SOLD OUT\" });\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmintAmount = 1;\n\t\t\t\t\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\n\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.log(\"err: \" + err);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (web3Modal.cachedProvider == \"walletconnect\") {\n\n\t\t\t\t\tconst chainId = 1;\n\n\t\t\t\t\tif (WalletConnectProvider.networkVersion !== chainId) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait WalletConnectProvider.request({\n\t\t\t\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\t\t\t\tparams: [{ chainId: web3.utils.toHex(chainId) }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t// This error code indicates that the chain has not been added to MetaMask.\n\t\t\t\t\t\t\tif (err.code === 4902) {\n\t\t\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tchainName: 'Ethereum Mainnet',\n\t\t\t\t\t\t\t\t\t\t\tchainId: web3.utils.toHex(chainId),\n\t\t\t\t\t\t\t\t\t\t\tnativeCurrency: { name: 'Ethereum Mainnet', decimals: 18, symbol: 'ETH' },\n\t\t\t\t\t\t\t\t\t\t\trpcUrls: ['https://mainnet.infura.io/v3/'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlocalStorage.setItem('isWalletConnected', true);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\tconsole.log(ex)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttotalSupplyNFT = await contract.methods.totalSupply().call();\n\t\t\t\t\t\tthis.setState({ totalSupply: totalSupplyNFT });\n\t\t\t\t\t\tconsole.log(\"Total Supply:\" + totalSupplyNFT);\n\n\t\t\t\t\t\tmaxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n\t\t\t\t\t\tthis.setState({ _maxMintAmountPerTx: maxMintAmountPerTx });\n\t\t\t\t\t\tconsole.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n\n\t\t\t\t\t\tpublicSale = await contract.methods.balanceOf(account).call();\n\t\t\t\t\t\tthis.setState({ myNFTWallet: publicSale });\n\n\t\t\t\t\t\tcost = await contract.methods.cost().call();\n\t\t\t\t\t\tthis.setState({ _cost: cost });\n\t\t\t\t\t\tconsole.log(\"cost :\" + cost);\n\n\t\t\t\t\t\towner = await contract.methods.owner().call();\n\t\t\t\t\t\tthis.setState({ _owner: owner });\n\t\t\t\t\t\tconsole.log(\"Owner\" + owner);\n\n\t\t\t\t\t\tif (owner == account) {\n\t\t\t\t\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\t\t\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmintAmount = 1;\n\n\t\t\t\t\t\t\tif (totalSupplyNFT == 10000) {\n\n\t\t\t\t\t\t\t\tonlyLeft = 10000 - publicSale;\n\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\tthis.setState({ msg: \"SOLD OUT\" });\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmintAmount = 1;\n\t\t\t\t\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\n\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.log(\"err: \" + err);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (web3Modal.cachedProvider == \"coinbasewallet\") {\n\n\t\t\t\t\tconst chainId = 1;\n\n\t\t\t\t\tif (CoinbaseWalletProvider.networkVersion !== chainId) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait CoinbaseWalletProvider.request({\n\t\t\t\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\t\t\t\tparams: [{ chainId: web3.utils.toHex(chainId) }],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t// This error code indicates that the chain has not been added to MetaMask.\n\t\t\t\t\t\t\tif (err.code === 4902) {\n\t\t\t\t\t\t\t\tawait CoinbaseWalletProvider.request({\n\t\t\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tchainName: 'Ethereum Mainnet',\n\t\t\t\t\t\t\t\t\t\t\tchainId: web3.utils.toHex(chainId),\n\t\t\t\t\t\t\t\t\t\t\tnativeCurrency: { name: 'Ethereum Mainnet', decimals: 18, symbol: 'ETH' },\n\t\t\t\t\t\t\t\t\t\t\trpcUrls: ['https://mainnet.infura.io/v3/'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlocalStorage.setItem('isWalletConnected', true);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\tconsole.log(ex)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttotalSupplyNFT = await contract.methods.totalSupply().call();\n\t\t\t\t\t\tthis.setState({ totalSupply: totalSupplyNFT });\n\t\t\t\t\t\tconsole.log(\"Total Supply:\" + totalSupplyNFT);\n\n\t\t\t\t\t\tmaxMintAmountPerTx = await contract.methods.maxMintAmountPerTx().call();\n\t\t\t\t\t\tthis.setState({ _maxMintAmountPerTx: maxMintAmountPerTx });\n\t\t\t\t\t\tconsole.log(\"maxMintAmountPerTx:\" + maxMintAmountPerTx);\n\n\t\t\t\t\t\tpublicSale = await contract.methods.balanceOf(account).call();\n\t\t\t\t\t\tthis.setState({ myNFTWallet: publicSale });\n\n\t\t\t\t\t\tcost = await contract.methods.cost().call();\n\t\t\t\t\t\tthis.setState({ _cost: cost });\n\t\t\t\t\t\tconsole.log(\"cost :\" + cost);\n\n\t\t\t\t\t\towner = await contract.methods.owner().call();\n\t\t\t\t\t\tthis.setState({ _owner: owner });\n\t\t\t\t\t\tconsole.log(\"Owner\" + owner);\n\n\n\t\t\t\t\t\tif (owner == account) {\n\t\t\t\t\t\t\tconsole.log(\"owner : \" + owner)\n\t\t\t\t\t\t\tonlyLeft = 10000 - totalSupplyNFT;\n\n\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * 0;\n\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmintAmount = 1;\n\n\t\t\t\t\t\t\tif (totalSupplyNFT == 10000) {\n\n\t\t\t\t\t\t\t\tonlyLeft = 10000 - publicSale;\n\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\tthis.setState({ msg: \"SOLD OUT\" });\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmintAmount = 1;\n\t\t\t\t\t\t\t\tonlyLeft = maxMintAmountPerTx;\n\n\t\t\t\t\t\t\t\tif (mintAmount > onlyLeft) {\n\t\t\t\t\t\t\t\t\tmintAmount = onlyLeft;\n\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\tvalueOfNFTs = mintAmount * this.state._cost;\n\t\t\t\t\t\t\t\tthis.setState({ nftMintingAmount: mintAmount });\n\t\t\t\t\t\t\t\tthis.setState({ totalValue: valueOfNFTs });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.log(\"err: \" + err);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\t//})();\n\n\t\t\t\t//.....................................................................//\n\n\t\t\t\t// Legacy providers may only have ethereum.sendAsync\n\t\t\t\tconst chainId = await provider.request({\n\t\t\t\t\tmethod: 'eth_chainId'\n\t\t\t\t})\n\n\t\t\t} else {\n\n\t\t\t\t// if the provider is not detected, detectEthereumProvider resolves to null\n\t\t\t\tconsole.error('Please install a Valid Wallet');\n\t\t\t\talert('A valid provider could not be found!');\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\twalletDisconnect = async event => {\n\t\tevent.preventDefault();\n\n\t\tconst providerOptions = {\n\t\t\twalletconnect: {\n\t\t\t\tpackage: WalletConnectProvider, // required\n\t\t\t\toptions: {\n\t\t\t\t\tinfuraId: \"bf933c3446b3464c988114813a1360ac\" // required\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst web3Modal = new Web3Modal({\n\t\t\tnetwork: \"mainnet\", // optional\n\t\t\tcacheProvider: true, // optional\n\t\t\tproviderOptions // required\n\t\t});\n\n\t\t// disconnect wallet\n\t\tweb3Modal.clearCachedProvider();\n\t\twindow.location.reload();\n\n\t\ttry {\n\t\t\tlocalStorage.setItem('isWalletConnected', false);\n\t\t} catch (ex) {\n\t\t\tconsole.log(ex);\n\t\t}\n\n\t}\n\n\trender() {\n\n\t\treturn (\n\n\t\t\t<div class=\"allWrap\">\n\t\t\t\t<div class=\"light\">\n\t\t\t\t\t<div class=\"cont\">\n\n\t\t\t\t\t\t<div class=\"headers\">\n\n\t\t\t\t\t\t\t<div class=\"headers2\">\n\n\t\t\t\t\t\t\t\t<div class=\"logo\"><img class=\"logoPic\" onClick={homeLink} src={logo} /></div>\n\n\t\t\t\t\t\t\t\t<div class=\"right\">\n\n\t\t\t\t\t\t\t\t\t<div class=\"icons\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"socialIcon\"><img onClick={homeLink} src={home} /></div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"socialIcon\"><img onClick={ops} src={os} /></div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"socialIcon\"><img onClick={tweet} src={twitter} /></div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"connect2\">\n\t\t\t\t\t\t\t\t\t\t{this.state.walletAddress === '' ?\n\t\t\t\t\t\t\t\t\t\t\t(<form onSubmit={this.walletConnect}>\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"wallet2\">Wallet Connect</button>\n\t\t\t\t\t\t\t\t\t\t\t</form>) : (<form onSubmit={this.walletDisconnect}><button class=\"wallet2\" >\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.walletAddress.slice(0, 3) + \"...\" + this.state.walletAddress.slice(39, 42)}</button></form>)}\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"introduction\">\n\n\t\t\t\t\t\t\t<div class=\"in2\">\n\t\t\t\t\t\t\t\t<div class=\"intro\">\n\t\t\t\t\t\t\t\t\t하이드미플리즈 <br /> 3차 NFT\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t{/* <div class=\"intro2\">\n\t\t\t\t\t\t\t\t\tWelcome to the home of HIDE ME PLEASE. Discover the best items in this collection.!\n\t\t\t\t\t\t\t\t</div> */}\n\n\t\t\t\t\t\t\t\t<div class=\"nftblockWalletConnectedALL\">\n\t\t\t\t\t\t\t\t\t{this.state.walletAddress === '' ? (\n\t\t\t\t\t\t\t\t\t\t<div class=\"walletConnect\">\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={this.walletConnect}>\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"wallet3\" type='submit'>MINT NOW</button>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{this.state.walletAddress === '' ?\n\n\t\t\t\t\t\t\t\t(<div class=\"nftPicDiv\">\n\t\t\t\t\t\t\t\t\t<img class=\"nftPic\" src='https://cdn.discordapp.com/attachments/1050552088779825176/1132041926456119367/hmp_nft.gif' />\n\t\t\t\t\t\t\t\t</div>) : (\n\n\t\t\t\t\t\t\t\t\t(<div class=\"mintDiv\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"totalSupply\">{this.state.totalSupply} / 10000</div>\n\t\t\t\t\t\t\t\t\t\t{this.state._maxMintAmountPerTx == this.state.myNFTWallet ?\n\n\t\t\t\t\t\t\t\t\t\t\t(<div class=\"price\"><div>Limit Reached!</div></div>) :\n\t\t\t\t\t\t\t\t\t\t\t(<div class=\"price\"><div>Mint Price {this.state._cost / 1000000000000000000} ETH</div></div>)}\n\n\t\t\t\t\t\t\t\t\t\t<div class=\"minting_count_button\">\n\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={this.onSubmitMinus}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"btnfos-0-2\" type=\"submit\">-</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"nftminter2\">{this.state.nftMintingAmount}</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={this.onSubmitPlus}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"btnfos-0-2\" type=\"submit\">+</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t<div class=\"mintbuttondiv\">\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={this.onSubmit2}>\n\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"btnfos-0-3\" type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state._publicMintMsg}</button>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t\t\t{this.state.statusError ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"errorMessage\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div >Sorry, something went wrong <br /> please try again later</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>)\n\t\t\t\t\t\t\t\t\t\t\t\t: null}\n\n\t\t\t\t\t\t\t\t\t\t\t{this.state.statusLoading ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"loadingContainer\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"loadingText\">Minting your NFT</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>)\n\t\t\t\t\t\t\t\t\t\t\t\t: null}\n\n\t\t\t\t\t\t\t\t\t\t\t{this.state.success ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"successfully\">MINTING SUCCESSFUL!</div>\n\t\t\t\t\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t: null}\n\n\t\t\t\t\t\t\t\t\t\t</div></div>\n\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div >\n\t\t\t</div >)\n\t}\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}